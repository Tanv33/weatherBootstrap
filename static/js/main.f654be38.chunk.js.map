{"version":3,"sources":["videos/sunny.mp4","videos/cloudy.mp4","videos/strom.mp4","videos/lightning.mp4","videos/rain.mp4","videos/v1.mp4","App.js","reportWebVitals.js","index.js"],"names":["App","useState","weather","setweather","cityName","useRef","location","setLocation","submit","setSubmit","videoBg","setVideoBg","useEffect","name","current","value","latitude","longitude","axios","get","then","res","newWeather","data","main","cloudy","rain","strom","lightning","mist","sunny","navigator","geolocation","getCurrentPosition","position","coords","console","log","Navbar","collapseOnSelect","expand","style","background","variant","Container","Brand","href","className","src","muted","loop","autoPlay","Form","Control","tabIndex","placeholder","ref","size","Button","onClick","description","temp","wind","speed","humidity","sys","country","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f654be38.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/sunny.8b5bedeb.mp4\";","export default __webpack_public_path__ + \"static/media/cloudy.195d4a0f.mp4\";","export default __webpack_public_path__ + \"static/media/strom.f4db934d.mp4\";","export default __webpack_public_path__ + \"static/media/lightning.dc9715c0.mp4\";","export default __webpack_public_path__ + \"static/media/rain.4e81a8c8.mp4\";","export default __webpack_public_path__ + \"static/media/v1.5f2050e6.mp4\";","import \"./App.css\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Button, Container, Form, Navbar } from \"react-bootstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport sunny from \"./videos/sunny.mp4\";\r\nimport cloudy from \"./videos/cloudy.mp4\";\r\nimport strom from \"./videos/strom.mp4\";\r\nimport lightning from \"./videos/lightning.mp4\";\r\nimport rain from \"./videos/rain.mp4\";\r\nimport mist from \"./videos/v1.mp4\";\r\n\r\nfunction App() {\r\n  const [weather, setweather] = useState(null);\r\n  const cityName = useRef(null);\r\n  const [location, setLocation] = useState(null);\r\n  const [submit, setSubmit] = useState(false);\r\n  const [videoBg, setVideoBg] = useState(null);\r\n  useEffect(() => {\r\n    let name = \"\";\r\n    if (cityName.current.value) {\r\n      name = `q=${cityName.current.value}`;\r\n    }else if (location === null){\r\n      name = `q=london`\r\n    }\r\n     else if (location) {\r\n      if (!location) {\r\n      } else if (location === \"fail\") {\r\n        name = \"q=new york\";\r\n      } else if (location && location.latitude) {\r\n        name = `lat=${location.latitude}&lon=${location.longitude}`;\r\n      }\r\n    }\r\n    if (name) {\r\n      axios\r\n        .get(\r\n          `https://api.openweathermap.org/data/2.5/weather?${name}&appid=8dad3db309e50de33c8cdefbe69cec74&units=metric`\r\n        )\r\n        .then((res) => {\r\n          const newWeather = res.data;\r\n          setweather(newWeather);\r\n          if (newWeather.weather[0].main === \"Clouds\") {\r\n            setVideoBg(cloudy);\r\n          } else if (newWeather.weather[0].main === \"Rain\") {\r\n            setVideoBg(rain);\r\n          } else if (newWeather.weather[0].main === \"Strom\") {\r\n            setVideoBg(strom);\r\n          } else if (\r\n            newWeather.weather[0].main ===\r\n            (\"Lightning\" || newWeather.weather[0].main === \"Thunder\")\r\n          ) {\r\n            setVideoBg(lightning);\r\n          } else if (newWeather.weather[0].main === \"Mist\") {\r\n            setVideoBg(mist);\r\n          } else {\r\n            setVideoBg(sunny);\r\n          }\r\n        });\r\n    }\r\n  }, [submit, location]);\r\n\r\n  useEffect(() => {\r\n    function getLocation() {\r\n      if (navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition((position) => {\r\n          setLocation({\r\n            latitude: position.coords.latitude,\r\n            longitude: position.coords.longitude,\r\n          });\r\n        });\r\n      } else {\r\n        console.log(\"Geolocation is not supported by this browser.\");\r\n      }\r\n    }\r\n    getLocation();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <Navbar\r\n          collapseOnSelect\r\n          expand=\"lg\"\r\n          style={{ background: \"#152238\" }}\r\n          variant=\"dark\"\r\n        >\r\n          <Container>\r\n            <Navbar.Brand href=\"#\">Weather-App</Navbar.Brand>\r\n          </Container>\r\n        </Navbar>{\" \"}\r\n        <Container className=\"mt-4 showBackground\">\r\n          <video src={videoBg} muted loop autoPlay></video>\r\n          <h1>City Name:</h1>          \r\n          <Form.Control\r\n            tabIndex=\"1\"\r\n            placeholder=\"Type Your City Name...\"\r\n            ref={cityName}\r\n            size=\"lg\"\r\n          />\r\n          <Button\r\n            tabIndex=\"2\"\r\n            className=\"my-3\"\r\n            style={{ background: \"#152238\" }}\r\n            onClick={() => {\r\n              setSubmit(!submit);\r\n            }}\r\n            size=\"lg\"\r\n          >\r\n            Submit\r\n          </Button>\r\n                   \r\n          <div className=\"myStyling\">\r\n                \r\n            {weather !== null ? (\r\n              <>\r\n                <h1>{weather.name} Weather</h1>\r\n                <h2>\r\n                  Nature: {weather.weather[0].main} (Description:{\" \"}\r\n                  {weather.weather[0].description})\r\n                </h2>\r\n                <h2>Temperature: {weather.main.temp}</h2>\r\n                <h2>Wind Speed: {weather.wind.speed}</h2>\r\n                <h2>Humidity: {weather.main.humidity}</h2>\r\n                <h2>Country: {weather.sys.country}</h2>                  \r\n              </>\r\n            ) : (\r\n              <h1>Loading...</h1>\r\n            )}{\" \"}\r\n                  \r\n          </div>\r\n        </Container>\r\n      </div>\r\n          \r\n    </>\r\n  );\r\n}\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}